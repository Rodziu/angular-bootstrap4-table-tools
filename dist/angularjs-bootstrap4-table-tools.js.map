{"version":3,"sources":["webpack://tableTools/webpack/universalModuleDefinition","webpack://tableTools/./.build/src/ts/lib/export/export.module.ts","webpack://tableTools/./.build/lib/export/lib/export/export.module.js","webpack://tableTools/./.build/src/ts/lib/export/tt-export.component.ts","webpack://tableTools/./.build/lib/export/lib/export/tt-export.component.js","webpack://tableTools/./.build/src/ts/lib/pagination/pagination.module.ts","webpack://tableTools/./.build/lib/pagination/lib/pagination/pagination.module.js","webpack://tableTools/./.build/src/ts/lib/pagination/tt-pagination.component.ts","webpack://tableTools/./.build/lib/pagination/lib/pagination/tt-pagination.component.js","webpack://tableTools/./.build/src/ts/lib/pagination/tt-pagination.factory.ts","webpack://tableTools/./.build/lib/pagination/lib/pagination/tt-pagination.factory.js","webpack://tableTools/./.build/src/ts/lib/pagination/tt-per-page.component.ts","webpack://tableTools/./.build/lib/pagination/lib/pagination/tt-per-page.component.js","webpack://tableTools/./.build/src/ts/lib/search/search.module.ts","webpack://tableTools/./.build/lib/search/lib/search/search.module.js","webpack://tableTools/./.build/src/ts/lib/search/tt-filter.directive.ts","webpack://tableTools/./.build/lib/search/lib/search/tt-filter.directive.js","webpack://tableTools/./.build/src/ts/lib/search/tt-search.component.ts","webpack://tableTools/./.build/lib/search/lib/search/tt-search.component.js","webpack://tableTools/./.build/src/ts/lib/search/tt-search.factory.ts","webpack://tableTools/./.build/lib/search/lib/search/tt-search.factory.js","webpack://tableTools/./.build/src/ts/lib/select/select.module.ts","webpack://tableTools/./.build/lib/select/lib/select/select.module.js","webpack://tableTools/./.build/src/ts/lib/select/tt-select-all.directive.ts","webpack://tableTools/./.build/lib/select/lib/select/tt-select-all.directive.js","webpack://tableTools/./.build/src/ts/lib/select/tt-select.directive.ts","webpack://tableTools/./.build/lib/select/lib/select/tt-select.directive.js","webpack://tableTools/./.build/src/ts/lib/select/tt-select.factory.ts","webpack://tableTools/./.build/lib/select/lib/select/tt-select.factory.js","webpack://tableTools/./.build/src/ts/lib/select/tt-selected-click.directive.ts","webpack://tableTools/./.build/lib/select/lib/select/tt-selected-click.directive.js","webpack://tableTools/./.build/src/ts/lib/sort/sort.module.ts","webpack://tableTools/./.build/lib/sort/lib/sort/sort.module.js","webpack://tableTools/./.build/src/ts/lib/sort/tt-sort.directive.ts","webpack://tableTools/./.build/lib/sort/lib/sort/tt-sort.directive.js","webpack://tableTools/./.build/src/ts/lib/sort/tt-sort.factory.ts","webpack://tableTools/./.build/lib/sort/lib/sort/tt-sort.factory.js","webpack://tableTools/./src/ts/lib/table-tools.directive.ts","webpack://tableTools/./.build/lib/lib/table-tools.directive.js","webpack://tableTools/./src/ts/lib/table-tools.module.ts","webpack://tableTools/./.build/lib/lib/table-tools.module.js","webpack://tableTools/./src/ts/lib/table-tools.provider.ts","webpack://tableTools/./.build/lib/lib/table-tools.provider.js","webpack://tableTools/./src/ts/lib/tt-footer.component.ts","webpack://tableTools/./.build/lib/lib/tt-footer.component.js","webpack://tableTools/./src/ts/lib/tt-header.component.ts","webpack://tableTools/./.build/lib/lib/tt-header.component.js","webpack://tableTools/./src/ts/lib/tt-loading.component.ts","webpack://tableTools/./.build/lib/lib/tt-loading.component.js","webpack://tableTools/./src/ts/lib/tt-results-count.component.ts","webpack://tableTools/./.build/lib/lib/tt-results-count.component.js","webpack://tableTools/./src/ts/lib/tt-row-placeholder.directive.ts","webpack://tableTools/./.build/lib/lib/tt-row-placeholder.directive.js","webpack://tableTools/external \"angular\"","webpack://tableTools/external \"angularjs-bootstrap-4\"","webpack://tableTools/webpack/bootstrap","webpack://tableTools/webpack/runtime/compat get default export","webpack://tableTools/webpack/runtime/define property getters","webpack://tableTools/webpack/runtime/hasOwnProperty shorthand","webpack://tableTools/webpack/runtime/make namespace object","webpack://tableTools/../src/ts/angularjs-bootstrap4-table-tools.ts","webpack://tableTools/./.build/angularjs-bootstrap4-table-tools.js"],"names":[],"mappings":"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","file":"angularjs-bootstrap4-table-tools.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"angularjs-bootstrap-4\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"angularjs-bootstrap4-table-tools\", [\"angular\", \"angularjs-bootstrap-4\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"angularjs-bootstrap4-table-tools\"] = factory(require(\"angular\"), require(\"angularjs-bootstrap-4\"));\n\telse\n\t\troot[\"angularjs-bootstrap4-table-tools\"] = factory(root[\"angular\"], root[\"angularjs-bootstrap-4\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_angular__, __WEBPACK_EXTERNAL_MODULE_angularjs_bootstrap_4__) {\nreturn ","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport * as angular from 'angular';\nimport angularBS from 'angularjs-bootstrap-4';\nimport {ttExportComponent} from './tt-export.component';\n\nconst exportModule = angular.module('tableTools.export', [angularBS])\n    .component('ttExport', ttExportComponent);\n\nexport const tableToolsExport = exportModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nimport angularBS from 'angularjs-bootstrap-4';\nimport { ttExportComponent } from './tt-export.component';\nconst exportModule = angular.module('tableTools.export', [angularBS])\n    .component('ttExport', ttExportComponent);\nexport const tableToolsExport = exportModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IComponentOptions, IController, IDocumentService, IQService} from 'angular';\nimport {ITableToolsExportType, TableToolsProvider} from '../table-tools.provider';\nimport {TableToolsController} from '../table-tools.directive';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nexport class TtExportController implements IController {\n    private $document: IDocumentService;\n    private $q: IQService;\n    private readonly tableTools: TableToolsProvider;\n    private exportTypes: { [p: string]: ITableToolsExportType };\n    private separators: { lang: string; separator: string }[];\n    private modal: boolean;\n    private exporting: string | false;\n    private config: { fileName: string, columnNames: boolean, separator: string };\n    private tableToolsCtrl: TableToolsController;\n    private columns: { txt: string, idx: number, exp: boolean }[];\n    private _copyElement: JQLite;\n\n    constructor(\n        $document: IDocumentService,\n        $q: IQService,\n        tableTools: TableToolsProvider\n    ) {\n        this.$document = $document;\n        this.$q = $q;\n        this.tableTools = tableTools;\n\n        this.exportTypes = tableTools.exportTypes;\n        this.separators = [\n            {lang: ',', separator: ','},\n            {lang: ';', separator: ';'},\n            {lang: tableTools.lang.tabulator, separator: '\\t'}\n        ];\n        this.modal = false;\n        this.exporting = false;\n        this.config = {\n            separator: ',',\n            fileName: '',\n            columnNames: true\n        };\n    }\n\n    showExport(): void {\n        const headers = this.tableToolsCtrl.$element[0]\n            .querySelectorAll('table > thead > tr:last-child > th');\n        this.columns = [];\n        for (let h = 0; h < headers.length; h++) {\n            if (!angular.element(headers[h]).hasClass('ignore-export')) {\n                this.columns.push({\n                    txt: headers[h].innerHTML,\n                    idx: h,\n                    exp: true\n                });\n            }\n        }\n        this.config.fileName = this.$document[0].title;\n        this.modal = true;\n    }\n\n    flipSelection(): void {\n        this.columns.forEach((column) => {\n            column.exp = !column.exp;\n        });\n    }\n\n    doExport(type: string, config: ITableToolsExportType): void {\n        this.exporting = type;\n        const indexes = [],\n            data = [],\n            parseText = (text: string): string => {\n                if (angular.isFunction(config['parseText'])) {\n                    text = config['parseText'](text);\n                }\n                return text;\n            },\n            appendRow = () => {\n                if (row.length) {\n                    if (type === 'csv' || type === 'copy') {\n                        data.push(row.join(this.config.separator));\n                    } else {\n                        data.push(row);\n                    }\n                    row = [];\n                }\n            };\n        let row = [];\n        // get columns to export\n        this.columns.forEach((column) => {\n            if (column.exp) {\n                indexes.push(column.idx);\n                if (this.config.columnNames) {\n                    row.push(parseText(column.txt));\n                }\n            }\n        });\n        appendRow();\n        // grab data\n        const columns = this.tableToolsCtrl.$element[0]\n            .querySelectorAll<HTMLTableCellElement>('table > tbody > tr:not(.ignore-export) > td');\n        let rowId = -1;\n        for (let c = 0; c < columns.length; c++) {\n            if (indexes.includes(columns[c].cellIndex)) {\n                if (columns[c].parentNode['rowIndex'] !== rowId) {\n                    rowId = columns[c].parentNode['rowIndex'];\n                    appendRow();\n                }\n                row.push(parseText(angular.element(columns[c]).text().trim()));\n            }\n        }\n        appendRow();\n        // export\n        let exportCallback;\n        switch (type) {\n            case 'copy':\n                exportCallback = (data) => {\n                    const copyElement = this._getCopyElement();\n                    copyElement.val(data.join('\\n'));\n                    copyElement[0].focus();\n                    (copyElement[0] as HTMLInputElement).select();\n                    this.$document[0].execCommand('copy');\n                };\n                break;\n            case 'csv':\n                exportCallback = (data, config) => {\n                    const a = this.$document[0].createElement('a'),\n                        item = '\\ufeff' + data.join('\\n'),\n                        blob = new Blob([item], {type: 'text/csv;utf-8'}),\n                        url = URL.createObjectURL(blob);\n                    a.setAttribute('style', 'display: none');\n                    a.href = url;\n                    a.download = config.fileName + '.csv';\n                    this.$document[0].body.appendChild(a);\n                    a.click();\n                    a.remove();\n                };\n                break;\n            default:\n                if (angular.isFunction(config['callback'])) {\n                    exportCallback = config['callback'];\n                } else {\n                    throw new Error('No callback provided for export type: ' + type);\n                }\n                break;\n        }\n        this.$q.when(exportCallback(data, this.config)).then(() => {\n            if (angular.isFunction(this.tableTools['exportNotification'])) {\n                this.tableTools['exportNotification'](type);\n            }\n            this.exporting = false;\n            this.modal = false;\n        });\n    }\n\n    private _getCopyElement(): JQLite {\n        if (angular.isUndefined(this._copyElement)) {\n            this._copyElement = angular.element(\n                '<textarea style=\"position:absolute;top:-1000px;left:-1000px\"></textarea>'\n            );\n            angular.element(this.$document[0].body).append(this._copyElement);\n        }\n        return this._copyElement;\n    }\n}\n\nexport const ttExportComponent: IComponentOptions = {\n    controller: TtExportController,\n    controllerAs: 'vm',\n    require: {\n        tableToolsCtrl: '^tableTools'\n    },\n    templateUrl: 'src/templates/export.html'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nexport class TtExportController {\n    constructor($document, $q, tableTools) {\n        this.$document = $document;\n        this.$q = $q;\n        this.tableTools = tableTools;\n        this.exportTypes = tableTools.exportTypes;\n        this.separators = [\n            { lang: ',', separator: ',' },\n            { lang: ';', separator: ';' },\n            { lang: tableTools.lang.tabulator, separator: '\\t' }\n        ];\n        this.modal = false;\n        this.exporting = false;\n        this.config = {\n            separator: ',',\n            fileName: '',\n            columnNames: true\n        };\n    }\n    showExport() {\n        const headers = this.tableToolsCtrl.$element[0]\n            .querySelectorAll('table > thead > tr:last-child > th');\n        this.columns = [];\n        for (let h = 0; h < headers.length; h++) {\n            if (!angular.element(headers[h]).hasClass('ignore-export')) {\n                this.columns.push({\n                    txt: headers[h].innerHTML,\n                    idx: h,\n                    exp: true\n                });\n            }\n        }\n        this.config.fileName = this.$document[0].title;\n        this.modal = true;\n    }\n    flipSelection() {\n        this.columns.forEach((column) => {\n            column.exp = !column.exp;\n        });\n    }\n    doExport(type, config) {\n        this.exporting = type;\n        const indexes = [], data = [], parseText = (text) => {\n            if (angular.isFunction(config['parseText'])) {\n                text = config['parseText'](text);\n            }\n            return text;\n        }, appendRow = () => {\n            if (row.length) {\n                if (type === 'csv' || type === 'copy') {\n                    data.push(row.join(this.config.separator));\n                }\n                else {\n                    data.push(row);\n                }\n                row = [];\n            }\n        };\n        let row = [];\n        // get columns to export\n        this.columns.forEach((column) => {\n            if (column.exp) {\n                indexes.push(column.idx);\n                if (this.config.columnNames) {\n                    row.push(parseText(column.txt));\n                }\n            }\n        });\n        appendRow();\n        // grab data\n        const columns = this.tableToolsCtrl.$element[0]\n            .querySelectorAll('table > tbody > tr:not(.ignore-export) > td');\n        let rowId = -1;\n        for (let c = 0; c < columns.length; c++) {\n            if (indexes.includes(columns[c].cellIndex)) {\n                if (columns[c].parentNode['rowIndex'] !== rowId) {\n                    rowId = columns[c].parentNode['rowIndex'];\n                    appendRow();\n                }\n                row.push(parseText(angular.element(columns[c]).text().trim()));\n            }\n        }\n        appendRow();\n        // export\n        let exportCallback;\n        switch (type) {\n            case 'copy':\n                exportCallback = (data) => {\n                    const copyElement = this._getCopyElement();\n                    copyElement.val(data.join('\\n'));\n                    copyElement[0].focus();\n                    copyElement[0].select();\n                    this.$document[0].execCommand('copy');\n                };\n                break;\n            case 'csv':\n                exportCallback = (data, config) => {\n                    const a = this.$document[0].createElement('a'), item = '\\ufeff' + data.join('\\n'), blob = new Blob([item], { type: 'text/csv;utf-8' }), url = URL.createObjectURL(blob);\n                    a.setAttribute('style', 'display: none');\n                    a.href = url;\n                    a.download = config.fileName + '.csv';\n                    this.$document[0].body.appendChild(a);\n                    a.click();\n                    a.remove();\n                };\n                break;\n            default:\n                if (angular.isFunction(config['callback'])) {\n                    exportCallback = config['callback'];\n                }\n                else {\n                    throw new Error('No callback provided for export type: ' + type);\n                }\n                break;\n        }\n        this.$q.when(exportCallback(data, this.config)).then(() => {\n            if (angular.isFunction(this.tableTools['exportNotification'])) {\n                this.tableTools['exportNotification'](type);\n            }\n            this.exporting = false;\n            this.modal = false;\n        });\n    }\n    _getCopyElement() {\n        if (angular.isUndefined(this._copyElement)) {\n            this._copyElement = angular.element('<textarea style=\"position:absolute;top:-1000px;left:-1000px\"></textarea>');\n            angular.element(this.$document[0].body).append(this._copyElement);\n        }\n        return this._copyElement;\n    }\n}\nexport const ttExportComponent = {\n    controller: TtExportController,\n    controllerAs: 'vm',\n    require: {\n        tableToolsCtrl: '^tableTools'\n    },\n    templateUrl: 'src/templates/export.html'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport * as angular from 'angular';\nimport {ttPaginationFactory} from './tt-pagination.factory';\nimport {ttPerPageComponent} from './tt-per-page.component';\nimport {ttPaginationComponent} from './tt-pagination.component';\n\nconst paginationModule = angular.module('tableTools.pagination', [])\n    .factory('ttPagination', ttPaginationFactory)\n    .component('ttPerPage', ttPerPageComponent)\n    .component('ttPagination', ttPaginationComponent);\n\nexport const tableToolsPagination = paginationModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nimport { ttPaginationFactory } from './tt-pagination.factory';\nimport { ttPerPageComponent } from './tt-per-page.component';\nimport { ttPaginationComponent } from './tt-pagination.component';\nconst paginationModule = angular.module('tableTools.pagination', [])\n    .factory('ttPagination', ttPaginationFactory)\n    .component('ttPerPage', ttPerPageComponent)\n    .component('ttPagination', ttPaginationComponent);\nexport const tableToolsPagination = paginationModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IComponentOptions} from 'angular';\n\nexport const ttPaginationComponent: IComponentOptions = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    controllerAs: 'vm',\n    transclude: true,\n    templateUrl: 'src/templates/pagination.html'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport const ttPaginationComponent = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    controllerAs: 'vm',\n    transclude: true,\n    templateUrl: 'src/templates/pagination.html'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nexport class TtPagination {\n    private readonly pagesAround: number;\n    private readonly visiblePageCount: number;\n    public page = 1;\n    public pages = 1;\n    public start = 0;\n    public end = 0;\n    public items: number[] = [];\n\n    constructor(visiblePageCount = 5) {\n        this.visiblePageCount = visiblePageCount;\n        this.pagesAround = Math.floor(visiblePageCount / 2);\n    }\n\n    paginate(resultsLength: number, perPage: number): void {\n        this.pages = Math.ceil(resultsLength / perPage);\n        if (this.pages === 0) {\n            this.pages = 1;\n        }\n        if (this.page > this.pages) {\n            this.page = this.pages;\n        }\n        this.items = [];\n        const pagesAfter = this.pages - this.page; // number of pages after currently selected page\n        let i = this.page // we set a starting page in here\n            - (pagesAfter < this.pagesAround // we won't be able to display all pages after current page\n                ? this.visiblePageCount - 1 - pagesAfter // so we display the difference before current page\n                : this.pagesAround);\n        if (i < 1) {\n            i = 1;\n        }\n        do {\n            this.items.push(i);\n            i++;\n        } while (this.items.length < this.visiblePageCount && i <= this.pages);\n        this.start = perPage === Infinity\n            ? 1\n            : Math.min(\n                ((this.page - 1) * perPage) + 1,\n                resultsLength\n            );\n        this.end = Math.min(this.page * perPage, resultsLength);\n    }\n}\n\nexport function ttPaginationFactory(): typeof TtPagination {\n    return TtPagination;\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport class TtPagination {\n    constructor(visiblePageCount = 5) {\n        this.page = 1;\n        this.pages = 1;\n        this.start = 0;\n        this.end = 0;\n        this.items = [];\n        this.visiblePageCount = visiblePageCount;\n        this.pagesAround = Math.floor(visiblePageCount / 2);\n    }\n    paginate(resultsLength, perPage) {\n        this.pages = Math.ceil(resultsLength / perPage);\n        if (this.pages === 0) {\n            this.pages = 1;\n        }\n        if (this.page > this.pages) {\n            this.page = this.pages;\n        }\n        this.items = [];\n        const pagesAfter = this.pages - this.page; // number of pages after currently selected page\n        let i = this.page // we set a starting page in here\n            - (pagesAfter < this.pagesAround // we won't be able to display all pages after current page\n                ? this.visiblePageCount - 1 - pagesAfter // so we display the difference before current page\n                : this.pagesAround);\n        if (i < 1) {\n            i = 1;\n        }\n        do {\n            this.items.push(i);\n            i++;\n        } while (this.items.length < this.visiblePageCount && i <= this.pages);\n        this.start = perPage === Infinity\n            ? 1\n            : Math.min(((this.page - 1) * perPage) + 1, resultsLength);\n        this.end = Math.min(this.page * perPage, resultsLength);\n    }\n}\nexport function ttPaginationFactory() {\n    return TtPagination;\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IComponentOptions} from 'angular';\n\nexport const ttPerPageComponent: IComponentOptions = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    controllerAs: 'vm',\n    template: '<div class=\"form-group\">'\n        + '<label>{{::vm.tableTools.lang.perPage}}&nbsp;</label>'\n        + '<select class=\"form-control\" ng-model=\"vm.tableTools.perPage\" ng-change=\"vm.tableTools.filterData()\"'\n        + ' ng-options=\"o.number as o.text for o in vm.tableTools.perPageOptions\"></select>'\n        + '</div>'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport const ttPerPageComponent = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    controllerAs: 'vm',\n    template: '<div class=\"form-group\">'\n        + '<label>{{::vm.tableTools.lang.perPage}}&nbsp;</label>'\n        + '<select class=\"form-control\" ng-model=\"vm.tableTools.perPage\" ng-change=\"vm.tableTools.filterData()\"'\n        + ' ng-options=\"o.number as o.text for o in vm.tableTools.perPageOptions\"></select>'\n        + '</div>'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nimport {ttFilterDirective} from './tt-filter.directive';\nimport {ttSearchFactory} from './tt-search.factory';\nimport {ttSearchComponent} from './tt-search.component';\n\nconst searchModule = angular.module('tableTools.search', [])\n    .directive('ttFilter', ttFilterDirective)\n    .factory('ttSearch', ttSearchFactory)\n    .component('ttSearch', ttSearchComponent);\n\nexport const tableToolsSearch = searchModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nimport { ttFilterDirective } from './tt-filter.directive';\nimport { ttSearchFactory } from './tt-search.factory';\nimport { ttSearchComponent } from './tt-search.component';\nconst searchModule = angular.module('tableTools.search', [])\n    .directive('ttFilter', ttFilterDirective)\n    .factory('ttSearch', ttSearchFactory)\n    .component('ttSearch', ttSearchComponent);\nexport const tableToolsSearch = searchModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IAttributes, IController, IDirective, IOnChangesObject} from 'angular';\nimport * as angular from 'angular';\nimport {operator} from './tt-search.factory';\nimport {TableToolsController} from '../table-tools.directive';\n\n/**\n * @ngInject\n */\nexport class TtFilterController implements IController {\n    private readonly $attrs: IAttributes;\n    private checkboxValue: unknown;\n    private ngModel: unknown;\n    private tableTools: TableToolsController;\n    public ttFilterEmpty: string;\n    public ttFilterOperator: operator;\n    public ttFilterOr: boolean;\n    public ttFilter: string;\n\n    constructor($attrs: IAttributes) {\n        this.$attrs = $attrs;\n        if ('type' in $attrs && $attrs['type'] === 'checkbox') {\n            $attrs.$observe('value', (value) => {\n                this.checkboxValue = value;\n            });\n        }\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.ttFilterOperator)) {\n            this.ttFilterOperator = '==';\n        }\n        if (angular.isUndefined(this.ttFilterEmpty)) {\n            this.ttFilterEmpty = '';\n        }\n        this.ttFilterOr = 'ttFilterOr' in this.$attrs || ('type' in this.$attrs && this.$attrs['type'] === 'checkbox');\n        this.tableTools.ttSearch.registerFilter(this.ttFilter, this);\n        this.tableTools.filterData();\n    }\n\n    $onChanges(changes: IOnChangesObject): void {\n        if ('ngModel' in changes && 'tableTools' in this) {\n            this.tableTools.filterData();\n        }\n    }\n\n    $onDestroy(): void {\n        this.tableTools.ttSearch.unregisterFilter(this.ttFilter, this);\n    }\n\n    getValue(): unknown {\n        if (angular.isDefined(this.checkboxValue)) {\n            return this.ngModel ? this.checkboxValue : this.ttFilterEmpty;\n        }\n        return this.ngModel;\n    }\n}\n\nexport function ttFilterDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @param {string} ttFilter\n     * @param {string} ttFilterOperator\n     * @param {string} ttFilterEmpty\n     * @param {string} ttFilterOr\n     */\n    return {\n        restrict: 'A',\n        require: {\n            tableTools: '^tableTools',\n            ngModelCtrl: 'ngModel'\n        },\n        bindToController: {\n            ttFilter: '@',\n            ttFilterOperator: '@',\n            ttFilterEmpty: '@',\n            ngModel: '<'\n        },\n        controller: TtFilterController\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nexport class TtFilterController {\n    constructor($attrs) {\n        this.$attrs = $attrs;\n        if ('type' in $attrs && $attrs['type'] === 'checkbox') {\n            $attrs.$observe('value', (value) => {\n                this.checkboxValue = value;\n            });\n        }\n    }\n    $onInit() {\n        if (angular.isUndefined(this.ttFilterOperator)) {\n            this.ttFilterOperator = '==';\n        }\n        if (angular.isUndefined(this.ttFilterEmpty)) {\n            this.ttFilterEmpty = '';\n        }\n        this.ttFilterOr = 'ttFilterOr' in this.$attrs || ('type' in this.$attrs && this.$attrs['type'] === 'checkbox');\n        this.tableTools.ttSearch.registerFilter(this.ttFilter, this);\n        this.tableTools.filterData();\n    }\n    $onChanges(changes) {\n        if ('ngModel' in changes && 'tableTools' in this) {\n            this.tableTools.filterData();\n        }\n    }\n    $onDestroy() {\n        this.tableTools.ttSearch.unregisterFilter(this.ttFilter, this);\n    }\n    getValue() {\n        if (angular.isDefined(this.checkboxValue)) {\n            return this.ngModel ? this.checkboxValue : this.ttFilterEmpty;\n        }\n        return this.ngModel;\n    }\n}\nexport function ttFilterDirective() {\n    /**\n     * @ngdoc directive\n     * @param {string} ttFilter\n     * @param {string} ttFilterOperator\n     * @param {string} ttFilterEmpty\n     * @param {string} ttFilterOr\n     */\n    return {\n        restrict: 'A',\n        require: {\n            tableTools: '^tableTools',\n            ngModelCtrl: 'ngModel'\n        },\n        bindToController: {\n            ttFilter: '@',\n            ttFilterOperator: '@',\n            ttFilterEmpty: '@',\n            ngModel: '<'\n        },\n        controller: TtFilterController\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IComponentOptions} from 'angular';\n\nexport const ttSearchComponent: IComponentOptions = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    controllerAs: 'vm',\n    template: '<div class=\"form-group\">'\n        + '<input type=\"text\" class=\"form-control\" ng-model=\"vm.tableTools.ttSearch.search\" '\n        + 'ng-change=\"vm.tableTools.filterData()\" placeholder=\"{{::vm.tableTools.lang.search}}\"/>'\n        + '</div>'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport const ttSearchComponent = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    controllerAs: 'vm',\n    template: '<div class=\"form-group\">'\n        + '<input type=\"text\" class=\"form-control\" ng-model=\"vm.tableTools.ttSearch.search\" '\n        + 'ng-change=\"vm.tableTools.filterData()\" placeholder=\"{{::vm.tableTools.lang.search}}\"/>'\n        + '</div>'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nimport {TtFilterController} from './tt-filter.directive';\n\nexport type operator = '>' | '<' | '>=' | '<=' | '==' | 'like';\n\nexport interface IFilterValue {\n    value: unknown,\n    operator: operator,\n    isOr: boolean\n}\n\nexport class TtSearch {\n    private filters: { [filter: string]: TtFilterController[] } = {};\n    public search = '';\n\n    registerFilter(field: string, controller: TtFilterController): void {\n        if (!(field in this.filters)) {\n            this.filters[field] = [];\n        }\n        this.filters[field].push(controller);\n    }\n\n    unregisterFilter(field: string, controller: TtFilterController): void {\n        this.filters[field].splice(this.filters[field].indexOf(controller), 1);\n        if (!this.filters[field].length) {\n            delete this.filters[field];\n        }\n    }\n\n    getFilters(): { [field: string]: IFilterValue[] } {\n        const result = {};\n        angular.forEach(this.filters, (controllers, field) => {\n            result[field] = [];\n            controllers.forEach((filter) => {\n                const value = filter.getValue();\n                if (\n                    angular.isUndefined(value)\n                    // eslint-disable-next-line eqeqeq\n                    || value == filter.ttFilterEmpty\n                    || (angular.isArray(value) && !value.length)\n                ) { // skip empty filters\n                    return;\n                }\n                result[field].push({\n                    value: value,\n                    operator: filter.ttFilterOperator,\n                    isOr: filter.ttFilterOr\n                });\n            })\n        });\n        return result;\n    }\n\n    doSearch(data: Record<string, unknown>[]): Record<string, unknown>[] {\n        if (\n            !data.length\n            || (\n                (!angular.isString(this.search) || this.search === '')\n                && !Object.keys(this.filters).length\n            )\n        ) {\n            return data;\n        }\n        const results = [],\n            search = angular.isString(this.search)\n                ? this.search.toLowerCase()\n                : this.search,\n            filters = this.getFilters();\n        angular.forEach(data, (row) => {\n            if (search === '' || this.hasSearchString(row, search)) {\n                let allPassed = true;\n                angular.forEach(filters, (filterValues, field) => {\n                    let isOr = false;\n                    const passed = filterValues.filter((filter) => {\n                        if (filter.isOr) {\n                            isOr = true;\n                        }\n                        return this.compareWithOperator(row[field], filter.value, filter.operator);\n                    });\n                    if (\n                        passed.length !== filterValues.length\n                        && !(isOr && passed.length > 0)\n                    ) {\n                        allPassed = false;\n                    }\n                });\n                if (allPassed) {\n                    results.push(row);\n                }\n            }\n        });\n        return results;\n    }\n\n    private hasSearchString(variable: unknown, search: string): boolean {\n        if (angular.isObject(variable)) {\n            return !!Object.keys(variable).find((key) => {\n                return key !== '$$hashKey' && this.hasSearchString(variable[key], search);\n            });\n        } else if (\n            // eslint-disable-next-line eqeqeq\n            (angular.isNumber(variable) && variable == search)\n            || (angular.isString(variable) && (variable as string).toLowerCase().includes(search))\n        ) {\n            return true;\n        }\n        return false;\n    }\n\n    private compareWithOperator(\n        variable: unknown | { [key: string]: unknown },\n        search: unknown | { [key: string]: unknown },\n        operator: operator\n    ): boolean {\n        if (angular.isObject(search)) {\n            return !!Object.values(search).find((value) => this.compareWithOperator(variable, value, operator));\n        }\n        if (angular.isObject(variable)) {\n            return !!Object.keys(variable).find((key) => {\n                return key !== '$$hashKey' && this.compareWithOperator(variable[key], search, operator);\n            });\n        }\n        if (angular.isUndefined(operator) || operator === 'like') {\n            return !(variable as string).toLowerCase().includes((search as string).toLowerCase());\n        } else {\n            switch (operator) {\n                case '>':\n                    return variable > search;\n                case '<':\n                    return variable < search;\n                case '>=':\n                    return variable >= search;\n                case '<=':\n                    return variable <= search;\n                case '==':\n                    // eslint-disable-next-line eqeqeq\n                    return variable == search;\n                default:\n                    return true;\n            }\n        }\n    }\n}\n\nexport function ttSearchFactory(): typeof TtSearch {\n    return TtSearch;\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nexport class TtSearch {\n    constructor() {\n        this.filters = {};\n        this.search = '';\n    }\n    registerFilter(field, controller) {\n        if (!(field in this.filters)) {\n            this.filters[field] = [];\n        }\n        this.filters[field].push(controller);\n    }\n    unregisterFilter(field, controller) {\n        this.filters[field].splice(this.filters[field].indexOf(controller), 1);\n        if (!this.filters[field].length) {\n            delete this.filters[field];\n        }\n    }\n    getFilters() {\n        const result = {};\n        angular.forEach(this.filters, (controllers, field) => {\n            result[field] = [];\n            controllers.forEach((filter) => {\n                const value = filter.getValue();\n                if (angular.isUndefined(value)\n                    // eslint-disable-next-line eqeqeq\n                    || value == filter.ttFilterEmpty\n                    || (angular.isArray(value) && !value.length)) { // skip empty filters\n                    return;\n                }\n                result[field].push({\n                    value: value,\n                    operator: filter.ttFilterOperator,\n                    isOr: filter.ttFilterOr\n                });\n            });\n        });\n        return result;\n    }\n    doSearch(data) {\n        if (!data.length\n            || ((!angular.isString(this.search) || this.search === '')\n                && !Object.keys(this.filters).length)) {\n            return data;\n        }\n        const results = [], search = angular.isString(this.search)\n            ? this.search.toLowerCase()\n            : this.search, filters = this.getFilters();\n        angular.forEach(data, (row) => {\n            if (search === '' || this.hasSearchString(row, search)) {\n                let allPassed = true;\n                angular.forEach(filters, (filterValues, field) => {\n                    let isOr = false;\n                    const passed = filterValues.filter((filter) => {\n                        if (filter.isOr) {\n                            isOr = true;\n                        }\n                        return this.compareWithOperator(row[field], filter.value, filter.operator);\n                    });\n                    if (passed.length !== filterValues.length\n                        && !(isOr && passed.length > 0)) {\n                        allPassed = false;\n                    }\n                });\n                if (allPassed) {\n                    results.push(row);\n                }\n            }\n        });\n        return results;\n    }\n    hasSearchString(variable, search) {\n        if (angular.isObject(variable)) {\n            return !!Object.keys(variable).find((key) => {\n                return key !== '$$hashKey' && this.hasSearchString(variable[key], search);\n            });\n        }\n        else if (\n        // eslint-disable-next-line eqeqeq\n        (angular.isNumber(variable) && variable == search)\n            || (angular.isString(variable) && variable.toLowerCase().includes(search))) {\n            return true;\n        }\n        return false;\n    }\n    compareWithOperator(variable, search, operator) {\n        if (angular.isObject(search)) {\n            return !!Object.values(search).find((value) => this.compareWithOperator(variable, value, operator));\n        }\n        if (angular.isObject(variable)) {\n            return !!Object.keys(variable).find((key) => {\n                return key !== '$$hashKey' && this.compareWithOperator(variable[key], search, operator);\n            });\n        }\n        if (angular.isUndefined(operator) || operator === 'like') {\n            return !variable.toLowerCase().includes(search.toLowerCase());\n        }\n        else {\n            switch (operator) {\n                case '>':\n                    return variable > search;\n                case '<':\n                    return variable < search;\n                case '>=':\n                    return variable >= search;\n                case '<=':\n                    return variable <= search;\n                case '==':\n                    // eslint-disable-next-line eqeqeq\n                    return variable == search;\n                default:\n                    return true;\n            }\n        }\n    }\n}\nexport function ttSearchFactory() {\n    return TtSearch;\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nimport {ttSelectFactory} from './tt-select.factory';\nimport {ttSelectDirective} from './tt-select.directive';\nimport {ttSelectAllDirective} from './tt-select-all.directive';\nimport {ttSelectedClickDirective} from './tt-selected-click.directive';\n\nconst selectModule = angular.module('tableTools.select', [])\n    .factory('ttSelect', ttSelectFactory)\n    .directive('ttSelect', ttSelectDirective)\n    .directive('ttSelectAll', ttSelectAllDirective)\n    .directive('ttSelectedClick', ttSelectedClickDirective);\n\nexport const tableToolsSelect = selectModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nimport { ttSelectFactory } from './tt-select.factory';\nimport { ttSelectDirective } from './tt-select.directive';\nimport { ttSelectAllDirective } from './tt-select-all.directive';\nimport { ttSelectedClickDirective } from './tt-selected-click.directive';\nconst selectModule = angular.module('tableTools.select', [])\n    .factory('ttSelect', ttSelectFactory)\n    .directive('ttSelect', ttSelectDirective)\n    .directive('ttSelectAll', ttSelectAllDirective)\n    .directive('ttSelectedClick', ttSelectedClickDirective);\nexport const tableToolsSelect = selectModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IDirective} from 'angular';\n\nexport function ttSelectAllDirective(): IDirective {\n    return {\n        restrict: 'AE',\n        require: '^tableTools',\n        template: '<input type=\"checkbox\" class=\"tt-select-all\" ng-model=\"tableTools.ttSelect.selectAll\" '\n            + 'ng-change=\"tableTools.ttSelect.changeAll()\"/>',\n        replace: true\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport function ttSelectAllDirective() {\n    return {\n        restrict: 'AE',\n        require: '^tableTools',\n        template: '<input type=\"checkbox\" class=\"tt-select-all\" ng-model=\"tableTools.ttSelect.selectAll\" '\n            + 'ng-change=\"tableTools.ttSelect.changeAll()\"/>',\n        replace: true\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IDirective} from 'angular';\nimport * as angular from 'angular';\n\nclass TtSelectDirectiveController {\n    private row: Record<string, unknown>;\n\n    $onInit() {\n        if (angular.isUndefined(this.row.ttSelectable)) {\n            this.row['ttSelectable'] = true;\n        }\n    }\n}\n\nexport function ttSelectDirective(): IDirective {\n    return {\n        restrict: 'AE',\n        template: '<input type=\"checkbox\" ng-model=\"vm.row.ttSelected\" ng-disabled=\"!vm.row.ttSelectable\" '\n            + 'ng-change=\"vm.tableTools.ttSelect.change()\"/>',\n        replace: true,\n        scope: true,\n        require: {\n            tableTools: '^tableTools'\n        },\n        bindToController: {\n            row: '=ttSelect'\n        },\n        controllerAs: 'vm',\n        controller: TtSelectDirectiveController\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nclass TtSelectDirectiveController {\n    $onInit() {\n        if (angular.isUndefined(this.row.ttSelectable)) {\n            this.row['ttSelectable'] = true;\n        }\n    }\n}\nexport function ttSelectDirective() {\n    return {\n        restrict: 'AE',\n        template: '<input type=\"checkbox\" ng-model=\"vm.row.ttSelected\" ng-disabled=\"!vm.row.ttSelectable\" '\n            + 'ng-change=\"vm.tableTools.ttSelect.change()\"/>',\n        replace: true,\n        scope: true,\n        require: {\n            tableTools: '^tableTools'\n        },\n        bindToController: {\n            row: '=ttSelect'\n        },\n        controllerAs: 'vm',\n        controller: TtSelectDirectiveController\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {TableToolsController} from '../table-tools.directive';\n\nexport class TtSelect {\n    private tableTools: TableToolsController;\n    public selectAll = false;\n\n    constructor(tableTools: TableToolsController) {\n        this.tableTools = tableTools;\n    }\n\n    changeAll(): void {\n        this.tableTools.data.forEach((row) => {\n            row.ttSelected = row.ttSelectable !== false ? this.selectAll : false;\n        });\n    }\n\n    change(): void {\n        for (let d = 0; d < this.tableTools.data.length; d++) {\n            if (!this.tableTools.data[d].ttSelected && this.tableTools.data[d].ttSelectable !== false) {\n                this.selectAll = false;\n                return;\n            }\n        }\n        this.selectAll = !this.tableTools.data.some((row) => {\n            return !row.ttSelected && row.ttSelectable !== false;\n        });\n    }\n\n    getSelected(): Record<string, unknown>[] {\n        return this.tableTools.data.filter((row) => {\n            return row.ttSelected && row.ttSelectable !== false;\n        })\n    }\n\n    hasSelected(): boolean {\n        return this.getSelected().length !== 0;\n    }\n}\n\nexport function ttSelectFactory(): typeof TtSelect {\n    return TtSelect;\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport class TtSelect {\n    constructor(tableTools) {\n        this.selectAll = false;\n        this.tableTools = tableTools;\n    }\n    changeAll() {\n        this.tableTools.data.forEach((row) => {\n            row.ttSelected = row.ttSelectable !== false ? this.selectAll : false;\n        });\n    }\n    change() {\n        for (let d = 0; d < this.tableTools.data.length; d++) {\n            if (!this.tableTools.data[d].ttSelected && this.tableTools.data[d].ttSelectable !== false) {\n                this.selectAll = false;\n                return;\n            }\n        }\n        this.selectAll = !this.tableTools.data.some((row) => {\n            return !row.ttSelected && row.ttSelectable !== false;\n        });\n    }\n    getSelected() {\n        return this.tableTools.data.filter((row) => {\n            return row.ttSelected && row.ttSelectable !== false;\n        });\n    }\n    hasSelected() {\n        return this.getSelected().length !== 0;\n    }\n}\nexport function ttSelectFactory() {\n    return TtSelect;\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IDirective, IScope} from 'angular';\nimport {TableToolsController} from '../table-tools.directive';\n\n/**\n * @ngInject\n */\nclass TtSelectedClickDirectiveController {\n    private $element: JQLite;\n    private tableTools: TableToolsController;\n    private _hasSelected;\n    private ttSelectedClick: (locals: {selected: Record<string, unknown>[]}) => void;\n    private $scope: IScope;\n\n    constructor($element: JQLite, $scope: IScope) {\n        this.$element = $element;\n        this.$scope = $scope;\n\n        $element.on('click', () => {\n            const selected = this.tableTools.ttSelect.getSelected();\n            if (selected.length) {\n                this.ttSelectedClick({selected});\n                this.$scope.$apply();\n            }\n        })\n    }\n\n    $doCheck() {\n        const hasSelected = this.tableTools.ttSelect.hasSelected();\n        if (hasSelected !== this._hasSelected) {\n            this._hasSelected = hasSelected;\n            this.$element.attr('disabled', hasSelected ? 'disabled' : null);\n        }\n    }\n}\n\nexport function ttSelectedClickDirective(): IDirective {\n    return {\n        restrict: 'AE',\n        replace: true,\n        scope: true,\n        require: {\n            tableTools: '^tableTools',\n        },\n        bindToController: {\n            ttSelectedClick: '&'\n        },\n        controller: TtSelectedClickDirectiveController\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n/**\n * @ngInject\n */\nclass TtSelectedClickDirectiveController {\n    constructor($element, $scope) {\n        this.$element = $element;\n        this.$scope = $scope;\n        $element.on('click', () => {\n            const selected = this.tableTools.ttSelect.getSelected();\n            if (selected.length) {\n                this.ttSelectedClick({ selected });\n                this.$scope.$apply();\n            }\n        });\n    }\n    $doCheck() {\n        const hasSelected = this.tableTools.ttSelect.hasSelected();\n        if (hasSelected !== this._hasSelected) {\n            this._hasSelected = hasSelected;\n            this.$element.attr('disabled', hasSelected ? 'disabled' : null);\n        }\n    }\n}\nexport function ttSelectedClickDirective() {\n    return {\n        restrict: 'AE',\n        replace: true,\n        scope: true,\n        require: {\n            tableTools: '^tableTools',\n        },\n        bindToController: {\n            ttSelectedClick: '&'\n        },\n        controller: TtSelectedClickDirectiveController\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nimport {ttSortFactory} from './tt-sort.factory';\nimport {ttSortDirective} from './tt-sort.directive';\n\nconst sortModule = angular.module('tableTools.sort', [])\n    .factory('ttSort', ttSortFactory)\n    .directive('ttSort', ttSortDirective);\n\nexport const tableToolsSort = sortModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nimport { ttSortFactory } from './tt-sort.factory';\nimport { ttSortDirective } from './tt-sort.directive';\nconst sortModule = angular.module('tableTools.sort', [])\n    .factory('ttSort', ttSortFactory)\n    .directive('ttSort', ttSortDirective);\nexport const tableToolsSort = sortModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {TableToolsController} from '../table-tools.directive';\nimport {IAttributes, IDirective, IScope} from 'angular';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nexport class TtSortDirectiveController {\n    private $element: JQLite;\n    private state: string;\n    private tableTools: TableToolsController;\n    private readonly $attrs: IAttributes;\n\n    constructor($element: JQLite, $attrs: IAttributes, $scope: IScope) {\n        this.$attrs = $attrs;\n        this.$element = $element;\n\n        $element.on('click', (e) => {\n            if (!e.shiftKey) { // change sorting direction\n                if (this.tableTools.order === this.$attrs['ttSort']) {\n                    this.tableTools.order = '-' + this.$attrs['ttSort'];\n                } else {\n                    this.tableTools.order = this.$attrs['ttSort'];\n                }\n            } else { // append to current order array\n                if (angular.isString(this.tableTools.order)) {\n                    this.tableTools.order = [this.tableTools.order];\n                } else if (!angular.isArray(this.tableTools.order)) {\n                    this.tableTools.order = [];\n                }\n                let found = false;\n                this.tableTools.order.map((order) => {\n                    if (order === this.$attrs['ttSort']) {\n                        found = true;\n                        return `-${this.$attrs['ttSort']}`;\n                    } else if (order === `-${this.$attrs['ttSort']}`) {\n                        found = true;\n                        return this.$attrs['ttSort'];\n                    }\n                    return order;\n                });\n                if (!found) {\n                    this.tableTools.order.push(this.$attrs['ttSort']);\n                }\n            }\n            $scope.$apply();\n        });\n    }\n\n    $onInit(): void {\n        this.tableTools.ttSort.register(this.$attrs['ttSort'], this);\n    }\n\n    $onDestroy(): void {\n        this.tableTools.ttSort.unregister(this.$attrs['ttSort'], this);\n    }\n\n    /**\n     * Update sorting item class\n     */\n    updateState(state: string): void {\n        if (this.state !== state) {\n            if (this.state) {\n                this.$element.removeClass('sorting-' + this.state);\n            }\n            if (state) {\n                this.$element.addClass('sorting-' + state);\n            }\n            this.state = state;\n        }\n    }\n}\n\nexport function ttSortDirective(): IDirective {\n    return {\n        restrict: 'A',\n        require: {\n            tableTools: '^tableTools'\n        },\n        bindToController: true,\n        controller: TtSortDirectiveController\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nexport class TtSortDirectiveController {\n    constructor($element, $attrs, $scope) {\n        this.$attrs = $attrs;\n        this.$element = $element;\n        $element.on('click', (e) => {\n            if (!e.shiftKey) { // change sorting direction\n                if (this.tableTools.order === this.$attrs['ttSort']) {\n                    this.tableTools.order = '-' + this.$attrs['ttSort'];\n                }\n                else {\n                    this.tableTools.order = this.$attrs['ttSort'];\n                }\n            }\n            else { // append to current order array\n                if (angular.isString(this.tableTools.order)) {\n                    this.tableTools.order = [this.tableTools.order];\n                }\n                else if (!angular.isArray(this.tableTools.order)) {\n                    this.tableTools.order = [];\n                }\n                let found = false;\n                this.tableTools.order.map((order) => {\n                    if (order === this.$attrs['ttSort']) {\n                        found = true;\n                        return `-${this.$attrs['ttSort']}`;\n                    }\n                    else if (order === `-${this.$attrs['ttSort']}`) {\n                        found = true;\n                        return this.$attrs['ttSort'];\n                    }\n                    return order;\n                });\n                if (!found) {\n                    this.tableTools.order.push(this.$attrs['ttSort']);\n                }\n            }\n            $scope.$apply();\n        });\n    }\n    $onInit() {\n        this.tableTools.ttSort.register(this.$attrs['ttSort'], this);\n    }\n    $onDestroy() {\n        this.tableTools.ttSort.unregister(this.$attrs['ttSort'], this);\n    }\n    /**\n     * Update sorting item class\n     */\n    updateState(state) {\n        if (this.state !== state) {\n            if (this.state) {\n                this.$element.removeClass('sorting-' + this.state);\n            }\n            if (state) {\n                this.$element.addClass('sorting-' + state);\n            }\n            this.state = state;\n        }\n    }\n}\nexport function ttSortDirective() {\n    return {\n        restrict: 'A',\n        require: {\n            tableTools: '^tableTools'\n        },\n        bindToController: true,\n        controller: TtSortDirectiveController\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport * as angular from 'angular';\nimport {IFilterOrderByItem} from 'angular';\nimport {TtSortDirectiveController} from './tt-sort.directive';\n\nexport interface IOrder {\n    col: string,\n    dir: 'asc' | 'desc'\n}\n\nexport class TtSort {\n    private sortItems: { [field: string]: TtSortDirectiveController[] } = {};\n    private sortItemsId = 0;\n    private lastSortItems = 0\n    private _lastOrder;\n\n    compareFn(v1: IFilterOrderByItem, v2: IFilterOrderByItem): -1 | 0 | 1 {\n        const isNumeric = (string: string) => {\n            const n = parseFloat(string);\n            return !isNaN(n) && isFinite(n);\n        };\n        if (v1.type === v2.type) {\n            if (v1.type === 'string') {\n                if (isNumeric(v1.value) && isNumeric(v2.value)) {\n                    return parseFloat(v1.value) < parseFloat(v2.value) ? -1 : 1;\n                }\n                // Compare strings case-insensitively\n                v1.value = v1.value.toLowerCase();\n                v2.value = v2.value.toLowerCase();\n            } else if (v1.type === 'object') {\n                // For basic objects, use the position of the object\n                // in the collection instead of the value\n                if (v1.value !== null && angular.isObject(v1.value)) {\n                    v1.value = v1.index;\n                }\n                if (v2.value !== null && angular.isObject(v2.value)) {\n                    v2.value = v2.index;\n                }\n            }\n            if (v1.value !== v2.value) {\n                if (angular.isFunction(v1.value.localeCompare)) {\n                    return v1.value.localeCompare(v2.value);\n                } else {\n                    return v1.value < v2.value ? -1 : 1;\n                }\n            }\n        } else {\n            return v1.type < v2.type ? -1 : 1;\n        }\n    }\n\n    register(field: string, controller: TtSortDirectiveController): void {\n        if (!(field in this.sortItems)) {\n            this.sortItems[field] = [];\n        }\n        this.sortItems[field].push(controller);\n        this.sortItemsId++;\n    }\n\n    unregister(field: string, controller: TtSortDirectiveController): void {\n        this.sortItems[field].splice(this.sortItems[field].indexOf(controller), 1);\n        if (!this.sortItems[field].length) {\n            delete this.sortItems[field];\n\n        }\n        this.sortItemsId++;\n    }\n\n    getOrder(orderValue: string | string[] | undefined): IOrder[] {\n        const order = [],\n            parsed = this.parseOrder(orderValue);\n        angular.forEach(parsed, (dir, col) => {\n            order.push({\n                col,\n                dir\n            });\n        });\n        return order;\n    }\n\n    private parseOrderItem(orderItem: string, parsed: Record<string, 'asc' | 'desc'>): void {\n        if (orderItem[0] === '-') {\n            parsed[orderItem.substring(1)] = 'desc';\n        } else {\n            parsed[orderItem] = 'asc';\n        }\n    }\n\n    private parseOrder(orderValue: string | string[] | undefined): Record<string, 'asc' | 'desc'> {\n        const parsed = {};\n        if (angular.isDefined(orderValue)) {\n            if (angular.isString(orderValue)) {\n                this.parseOrderItem(orderValue, parsed);\n            } else if (angular.isArray(orderValue)) {\n                orderValue.forEach((item) => {\n                    this.parseOrderItem(item, parsed);\n                })\n            }\n        }\n        return parsed;\n    }\n\n    /**\n     * Propagate order change to all child sort directives\n     */\n    orderUpdate(orderValue: string | string[] | undefined): boolean {\n        if (!angular.equals(orderValue, this._lastOrder) || this.lastSortItems !== this.sortItemsId) {\n            const parsed = this.parseOrder(orderValue);\n            //\n            angular.forEach(this.sortItems, (sortItem, field) => {\n                sortItem.forEach((controller) => {\n                    controller.updateState(parsed[field]);\n                });\n            });\n            this._lastOrder = angular.copy(orderValue);\n            this.lastSortItems = this.sortItemsId;\n            return true;\n        }\n        return false;\n    }\n}\n\nexport function ttSortFactory(): typeof TtSort {\n    return TtSort;\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nexport class TtSort {\n    constructor() {\n        this.sortItems = {};\n        this.sortItemsId = 0;\n        this.lastSortItems = 0;\n    }\n    compareFn(v1, v2) {\n        const isNumeric = (string) => {\n            const n = parseFloat(string);\n            return !isNaN(n) && isFinite(n);\n        };\n        if (v1.type === v2.type) {\n            if (v1.type === 'string') {\n                if (isNumeric(v1.value) && isNumeric(v2.value)) {\n                    return parseFloat(v1.value) < parseFloat(v2.value) ? -1 : 1;\n                }\n                // Compare strings case-insensitively\n                v1.value = v1.value.toLowerCase();\n                v2.value = v2.value.toLowerCase();\n            }\n            else if (v1.type === 'object') {\n                // For basic objects, use the position of the object\n                // in the collection instead of the value\n                if (v1.value !== null && angular.isObject(v1.value)) {\n                    v1.value = v1.index;\n                }\n                if (v2.value !== null && angular.isObject(v2.value)) {\n                    v2.value = v2.index;\n                }\n            }\n            if (v1.value !== v2.value) {\n                if (angular.isFunction(v1.value.localeCompare)) {\n                    return v1.value.localeCompare(v2.value);\n                }\n                else {\n                    return v1.value < v2.value ? -1 : 1;\n                }\n            }\n        }\n        else {\n            return v1.type < v2.type ? -1 : 1;\n        }\n    }\n    register(field, controller) {\n        if (!(field in this.sortItems)) {\n            this.sortItems[field] = [];\n        }\n        this.sortItems[field].push(controller);\n        this.sortItemsId++;\n    }\n    unregister(field, controller) {\n        this.sortItems[field].splice(this.sortItems[field].indexOf(controller), 1);\n        if (!this.sortItems[field].length) {\n            delete this.sortItems[field];\n        }\n        this.sortItemsId++;\n    }\n    getOrder(orderValue) {\n        const order = [], parsed = this.parseOrder(orderValue);\n        angular.forEach(parsed, (dir, col) => {\n            order.push({\n                col,\n                dir\n            });\n        });\n        return order;\n    }\n    parseOrderItem(orderItem, parsed) {\n        if (orderItem[0] === '-') {\n            parsed[orderItem.substring(1)] = 'desc';\n        }\n        else {\n            parsed[orderItem] = 'asc';\n        }\n    }\n    parseOrder(orderValue) {\n        const parsed = {};\n        if (angular.isDefined(orderValue)) {\n            if (angular.isString(orderValue)) {\n                this.parseOrderItem(orderValue, parsed);\n            }\n            else if (angular.isArray(orderValue)) {\n                orderValue.forEach((item) => {\n                    this.parseOrderItem(item, parsed);\n                });\n            }\n        }\n        return parsed;\n    }\n    /**\n     * Propagate order change to all child sort directives\n     */\n    orderUpdate(orderValue) {\n        if (!angular.equals(orderValue, this._lastOrder) || this.lastSortItems !== this.sortItemsId) {\n            const parsed = this.parseOrder(orderValue);\n            //\n            angular.forEach(this.sortItems, (sortItem, field) => {\n                sortItem.forEach((controller) => {\n                    controller.updateState(parsed[field]);\n                });\n            });\n            this._lastOrder = angular.copy(orderValue);\n            this.lastSortItems = this.sortItemsId;\n            return true;\n        }\n        return false;\n    }\n}\nexport function ttSortFactory() {\n    return TtSort;\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {\n    IController, IDirective,\n    IDocumentService,\n    IFilterService,\n    IHttpService, ILogService, IOnChangesObject,\n    IQService,\n    ITimeoutService,\n    IWindowService\n} from 'angular';\nimport {\n    IPerPageOption,\n    ITableToolsLang,\n    ITableToolsResponse,\n    TableToolsProvider,\n    TableToolsResolver\n} from './table-tools.provider';\nimport {TtPagination} from './pagination/tt-pagination.factory';\nimport {TtSearch} from './search/tt-search.factory';\nimport {TtSelect} from './select/tt-select.factory';\nimport {TtSort} from './sort/tt-sort.factory';\nimport * as angular from 'angular';\n\n/**\n * @ngInject\n */\nexport class TableToolsController implements IController {\n    private $document: IDocumentService;\n    private $window: IWindowService;\n    private readonly $filter: IFilterService;\n    private $q: IQService;\n    private $http: IHttpService;\n    private readonly $timeout: ITimeoutService;\n    private $log: ILogService;\n    private tableToolsOptions: TableToolsProvider;\n    private lang: ITableToolsLang;\n    private lastResolve = {id: 0, timeout: null};\n    public $element: JQLite;\n    public pagination: TtPagination;\n    public ttSearch: TtSearch;\n    public ttSort: TtSort;\n    public ttSelect: TtSelect;\n    public data: Record<string, unknown>[] = [];\n    public dataLength = 0;\n    public filteredCount = 0;\n    public order?: string | string[];\n    public perPage: number;\n    public perPageOptions: IPerPageOption[];\n    public ttUrl?: string;\n    public ttResolver: TableToolsResolver;\n    public loading: boolean;\n    public tableTools: Record<string, unknown>[];\n\n    constructor(\n        $element: JQLite,\n        $document: IDocumentService,\n        $window: IWindowService,\n        $filter: IFilterService,\n        $q: IQService,\n        $http: IHttpService,\n        $timeout: ITimeoutService,\n        $log: ILogService,\n        tableTools: TableToolsProvider,\n        ttPagination: typeof TtPagination,\n        ttSearch: typeof TtSearch,\n        ttSort: typeof TtSort,\n        ttSelect: typeof TtSelect\n    ) {\n        this.$element = $element;\n        this.$document = $document;\n        this.$window = $window;\n        this.$filter = $filter;\n        this.$q = $q;\n        this.$http = $http;\n        this.$timeout = $timeout;\n        this.$log = $log;\n\n        this.tableToolsOptions = tableTools;\n        this.pagination = new ttPagination();\n        this.ttSearch = new ttSearch();\n        this.ttSort = new ttSort();\n        this.ttSelect = new ttSelect(this);\n        this.lang = tableTools.lang;\n    }\n\n    $onInit(): void {\n        if (angular.isUndefined(this.perPage)) {\n            this.perPage = this.tableToolsOptions.perPage;\n        }\n        if (angular.isUndefined(this.perPageOptions)) {\n            this.perPageOptions = this.tableToolsOptions.perPageOptions;\n        }\n        if (angular.isDefined(this.ttUrl) && !angular.isFunction(this.ttResolver)) {\n            if (angular.isFunction(this.tableToolsOptions.defaultTableToolsResolver)) {\n                this.ttResolver = this.tableToolsOptions.defaultTableToolsResolver;\n            } else {\n                this.ttResolver = (limit, offset, order, search, filters, url) => {\n                    const deferred = this.$q.defer<ITableToolsResponse>();\n                    this.$http.post<ITableToolsResponse>(url, {\n                        getTableToolsData: 1,\n                        limit: limit,\n                        offset: offset,\n                        order: order,\n                        search: search,\n                        filters: filters\n                    }).then((response) => {\n                        deferred.resolve(response.data);\n                    }).catch(function() {\n                        deferred.reject();\n                    });\n                    return deferred.promise;\n                };\n            }\n        }\n        this.filterData();\n    }\n\n    $onChanges(changes: IOnChangesObject): void {\n        if ('tableTools' in changes) {\n            this.filterData();\n        }\n    }\n\n    $doCheck(): void {\n        if (this.ttSort.orderUpdate(this.order)) {\n            this.filterData();\n        }\n    }\n\n    filterData(): void {\n        // if (angular.isUndefined(this.ttSearch)) { // tableTools are not yet fully initialized\n        //     return;\n        // }\n        let timeout;\n        this.loading = true;\n        if (angular.isFunction(this.ttResolver)) {\n            timeout = 0;\n            if (this.lastResolve.timeout !== null) {\n                this.$timeout.cancel(this.lastResolve.timeout);\n                timeout = 750;\n            }\n            const id = ++this.lastResolve.id;\n            this.lastResolve.timeout = this.$timeout(() => {\n                this.ttResolver(\n                    this.perPage, (this.pagination.page - 1) * this.perPage,\n                    this.ttSort.getOrder(this.order),\n                    this.ttSearch.search, this.ttSearch.getFilters(), this.ttUrl\n                ).then((result) => {\n                    /** @var {{data: Array, count: number, countFiltered: number}} result */\n                    if (\n                        angular.isUndefined(result.data)\n                        || !angular.isNumber(result.count)\n                        || !angular.isNumber(result.countFiltered)\n                    ) {\n                        throw new Error('TableTools - wrong result format');\n                    }\n                    if (this.lastResolve.id === id) {\n                        this.data = result.data;\n                        this.dataLength = result.count;\n                        this.filteredCount = result.countFiltered;\n                        if (this.pagination.page > 1 && !this.data.length) {\n                            this.changePage(1);\n                        }\n                    }\n                }).catch((e) => {\n                    this.$log.error(e);\n                    if (this.lastResolve.id === id) {\n                        this.data = [];\n                        this.dataLength = 0;\n                        this.filteredCount = 0;\n                    }\n                }).finally(() => {\n                    if (this.lastResolve.id === id) {\n                        this.pagination.paginate(this.filteredCount, this.perPage);\n                        this.ttSelect.change();\n                        this.loading = false;\n                        this.lastResolve.timeout = null;\n                    }\n                });\n            }, timeout);\n            return;\n        }\n        timeout = 0;\n        if (this.lastResolve.timeout !== null) {\n            this.$timeout.cancel(this.lastResolve.timeout);\n            timeout = 50;\n        }\n        this.lastResolve.timeout = this.$timeout(() => {\n            this.data = angular.copy(this.tableTools);\n            this.dataLength = this.data.length;\n            this.data = this.ttSearch.doSearch(this.data);\n            this.filteredCount = this.data.length;\n            this.data = this.$filter('orderBy')(this.data, this.order, false, this.ttSort.compareFn);\n            this.pagination.paginate(this.data.length, this.perPage);\n            this.data = this.$filter('limitTo')(this.data, this.perPage, this.pagination.start - 1);\n            this.ttSelect.change();\n            this.lastResolve.timeout = null;\n            this.loading = false;\n        }, timeout);\n    }\n\n    changePage(page: number | 'prev' | 'next'): void {\n        const originalPage = this.pagination.page;\n        if (page === 'prev') {\n            if (this.pagination.page > 1) {\n                this.pagination.page--;\n            }\n        } else if (page === 'next') {\n            if (this.pagination.page < this.pagination.pages) {\n                this.pagination.page++;\n            }\n        } else if (!isNaN(page)) {\n            this.pagination.page = page;\n        }\n        if (originalPage !== this.pagination.page) {\n            this.filterData();\n        }\n        this.scrollTo(\n            Math.round(\n                this.$element[0].getBoundingClientRect().top\n                + (this.$window.pageYOffset || this.$document[0].documentElement.scrollTop)\n            ) + this.tableToolsOptions.scrollOffset,\n            1000\n        );\n    }\n\n    private scrollTo(target: number, duration: number): void {\n        const cur = this.$window.scrollY,\n            start = performance.now(),\n            step = (ts) => {\n                const elapsed = ts - start;\n                if (elapsed >= 1000) {\n                    this.$window.scrollTo(0, target);\n                    return;\n                }\n                this.$window.scrollTo(0, cur - Math.sin((Math.PI / 2) / (duration / elapsed)) * (cur - target));\n                this.$window.requestAnimationFrame(step);\n            };\n        this.$window.requestAnimationFrame(step);\n    }\n}\n\nexport function tableToolsDirective(): IDirective {\n    /**\n     * @ngdoc directive\n     * @name tableTools\n     *\n     * @param {expression|Array} tableTools\n     * @param {expression|number} perPage\n     * @param {expression} perPageOptions\n     * @param {expression|number} order\n     * @param {expression|string} ttUrl\n     * @param ttResolver\n     */\n    return {\n        restrict: 'A',\n        scope: true,\n        bindToController: {\n            tableTools: '<',\n            perPage: '<',\n            perPageOptions: '<',\n            order: '=?',\n            ttUrl: '@',\n            ttResolver: '<'\n        },\n        controllerAs: 'tableTools',\n        controller: TableToolsController\n    };\n}\n\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\n/**\n * @ngInject\n */\nexport class TableToolsController {\n    constructor($element, $document, $window, $filter, $q, $http, $timeout, $log, tableTools, ttPagination, ttSearch, ttSort, ttSelect) {\n        this.lastResolve = { id: 0, timeout: null };\n        this.data = [];\n        this.dataLength = 0;\n        this.filteredCount = 0;\n        this.$element = $element;\n        this.$document = $document;\n        this.$window = $window;\n        this.$filter = $filter;\n        this.$q = $q;\n        this.$http = $http;\n        this.$timeout = $timeout;\n        this.$log = $log;\n        this.tableToolsOptions = tableTools;\n        this.pagination = new ttPagination();\n        this.ttSearch = new ttSearch();\n        this.ttSort = new ttSort();\n        this.ttSelect = new ttSelect(this);\n        this.lang = tableTools.lang;\n    }\n    $onInit() {\n        if (angular.isUndefined(this.perPage)) {\n            this.perPage = this.tableToolsOptions.perPage;\n        }\n        if (angular.isUndefined(this.perPageOptions)) {\n            this.perPageOptions = this.tableToolsOptions.perPageOptions;\n        }\n        if (angular.isDefined(this.ttUrl) && !angular.isFunction(this.ttResolver)) {\n            if (angular.isFunction(this.tableToolsOptions.defaultTableToolsResolver)) {\n                this.ttResolver = this.tableToolsOptions.defaultTableToolsResolver;\n            }\n            else {\n                this.ttResolver = (limit, offset, order, search, filters, url) => {\n                    const deferred = this.$q.defer();\n                    this.$http.post(url, {\n                        getTableToolsData: 1,\n                        limit: limit,\n                        offset: offset,\n                        order: order,\n                        search: search,\n                        filters: filters\n                    }).then((response) => {\n                        deferred.resolve(response.data);\n                    }).catch(function () {\n                        deferred.reject();\n                    });\n                    return deferred.promise;\n                };\n            }\n        }\n        this.filterData();\n    }\n    $onChanges(changes) {\n        if ('tableTools' in changes) {\n            this.filterData();\n        }\n    }\n    $doCheck() {\n        if (this.ttSort.orderUpdate(this.order)) {\n            this.filterData();\n        }\n    }\n    filterData() {\n        // if (angular.isUndefined(this.ttSearch)) { // tableTools are not yet fully initialized\n        //     return;\n        // }\n        let timeout;\n        this.loading = true;\n        if (angular.isFunction(this.ttResolver)) {\n            timeout = 0;\n            if (this.lastResolve.timeout !== null) {\n                this.$timeout.cancel(this.lastResolve.timeout);\n                timeout = 750;\n            }\n            const id = ++this.lastResolve.id;\n            this.lastResolve.timeout = this.$timeout(() => {\n                this.ttResolver(this.perPage, (this.pagination.page - 1) * this.perPage, this.ttSort.getOrder(this.order), this.ttSearch.search, this.ttSearch.getFilters(), this.ttUrl).then((result) => {\n                    /** @var {{data: Array, count: number, countFiltered: number}} result */\n                    if (angular.isUndefined(result.data)\n                        || !angular.isNumber(result.count)\n                        || !angular.isNumber(result.countFiltered)) {\n                        throw new Error('TableTools - wrong result format');\n                    }\n                    if (this.lastResolve.id === id) {\n                        this.data = result.data;\n                        this.dataLength = result.count;\n                        this.filteredCount = result.countFiltered;\n                        if (this.pagination.page > 1 && !this.data.length) {\n                            this.changePage(1);\n                        }\n                    }\n                }).catch((e) => {\n                    this.$log.error(e);\n                    if (this.lastResolve.id === id) {\n                        this.data = [];\n                        this.dataLength = 0;\n                        this.filteredCount = 0;\n                    }\n                }).finally(() => {\n                    if (this.lastResolve.id === id) {\n                        this.pagination.paginate(this.filteredCount, this.perPage);\n                        this.ttSelect.change();\n                        this.loading = false;\n                        this.lastResolve.timeout = null;\n                    }\n                });\n            }, timeout);\n            return;\n        }\n        timeout = 0;\n        if (this.lastResolve.timeout !== null) {\n            this.$timeout.cancel(this.lastResolve.timeout);\n            timeout = 50;\n        }\n        this.lastResolve.timeout = this.$timeout(() => {\n            this.data = angular.copy(this.tableTools);\n            this.dataLength = this.data.length;\n            this.data = this.ttSearch.doSearch(this.data);\n            this.filteredCount = this.data.length;\n            this.data = this.$filter('orderBy')(this.data, this.order, false, this.ttSort.compareFn);\n            this.pagination.paginate(this.data.length, this.perPage);\n            this.data = this.$filter('limitTo')(this.data, this.perPage, this.pagination.start - 1);\n            this.ttSelect.change();\n            this.lastResolve.timeout = null;\n            this.loading = false;\n        }, timeout);\n    }\n    changePage(page) {\n        const originalPage = this.pagination.page;\n        if (page === 'prev') {\n            if (this.pagination.page > 1) {\n                this.pagination.page--;\n            }\n        }\n        else if (page === 'next') {\n            if (this.pagination.page < this.pagination.pages) {\n                this.pagination.page++;\n            }\n        }\n        else if (!isNaN(page)) {\n            this.pagination.page = page;\n        }\n        if (originalPage !== this.pagination.page) {\n            this.filterData();\n        }\n        this.scrollTo(Math.round(this.$element[0].getBoundingClientRect().top\n            + (this.$window.pageYOffset || this.$document[0].documentElement.scrollTop)) + this.tableToolsOptions.scrollOffset, 1000);\n    }\n    scrollTo(target, duration) {\n        const cur = this.$window.scrollY, start = performance.now(), step = (ts) => {\n            const elapsed = ts - start;\n            if (elapsed >= 1000) {\n                this.$window.scrollTo(0, target);\n                return;\n            }\n            this.$window.scrollTo(0, cur - Math.sin((Math.PI / 2) / (duration / elapsed)) * (cur - target));\n            this.$window.requestAnimationFrame(step);\n        };\n        this.$window.requestAnimationFrame(step);\n    }\n}\nexport function tableToolsDirective() {\n    /**\n     * @ngdoc directive\n     * @name tableTools\n     *\n     * @param {expression|Array} tableTools\n     * @param {expression|number} perPage\n     * @param {expression} perPageOptions\n     * @param {expression|number} order\n     * @param {expression|string} ttUrl\n     * @param ttResolver\n     */\n    return {\n        restrict: 'A',\n        scope: true,\n        bindToController: {\n            tableTools: '<',\n            perPage: '<',\n            perPageOptions: '<',\n            order: '=?',\n            ttUrl: '@',\n            ttResolver: '<'\n        },\n        controllerAs: 'tableTools',\n        controller: TableToolsController\n    };\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport * as angular from 'angular';\nimport {tableToolsExport} from './export/export.module';\nimport {TableToolsProvider} from './table-tools.provider';\nimport {tableToolsPagination} from './pagination/pagination.module';\nimport {tableToolsSearch} from './search/search.module';\nimport {tableToolsSelect} from './select/select.module';\nimport {tableToolsSort} from './sort/sort.module';\nimport {tableToolsDirective} from './table-tools.directive';\nimport {ttFooterComponent} from './tt-footer.component';\nimport {ttHeaderComponent} from './tt-header.component';\nimport {ttLoadingComponent} from './tt-loading.component';\nimport {ttResultsCountComponent} from './tt-results-count.component';\nimport {ttRowPlaceholderDirective} from './tt-row-placeholder.directive';\n\nconst tableToolsModule = angular.module('tableTools', [\n    tableToolsSearch, tableToolsPagination, tableToolsExport, tableToolsSelect, tableToolsSort\n])\n    .provider('tableTools', TableToolsProvider)\n    .directive('tableTools', tableToolsDirective)\n    .directive('ttRowPlaceholder', ttRowPlaceholderDirective)\n    .component('ttFooter', ttFooterComponent)\n    .component('ttHeader', ttHeaderComponent)\n    .component('ttLoading', ttLoadingComponent)\n    .component('ttResultsCount', ttResultsCountComponent);\n\nexport const tableTools = tableToolsModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport * as angular from 'angular';\nimport { tableToolsExport } from './export/export.module';\nimport { TableToolsProvider } from './table-tools.provider';\nimport { tableToolsPagination } from './pagination/pagination.module';\nimport { tableToolsSearch } from './search/search.module';\nimport { tableToolsSelect } from './select/select.module';\nimport { tableToolsSort } from './sort/sort.module';\nimport { tableToolsDirective } from './table-tools.directive';\nimport { ttFooterComponent } from './tt-footer.component';\nimport { ttHeaderComponent } from './tt-header.component';\nimport { ttLoadingComponent } from './tt-loading.component';\nimport { ttResultsCountComponent } from './tt-results-count.component';\nimport { ttRowPlaceholderDirective } from './tt-row-placeholder.directive';\nconst tableToolsModule = angular.module('tableTools', [\n    tableToolsSearch, tableToolsPagination, tableToolsExport, tableToolsSelect, tableToolsSort\n])\n    .provider('tableTools', TableToolsProvider)\n    .directive('tableTools', tableToolsDirective)\n    .directive('ttRowPlaceholder', ttRowPlaceholderDirective)\n    .component('ttFooter', ttFooterComponent)\n    .component('ttHeader', ttHeaderComponent)\n    .component('ttLoading', ttLoadingComponent)\n    .component('ttResultsCount', ttResultsCountComponent);\nexport const tableTools = tableToolsModule.name;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IPromise, IServiceProvider} from 'angular';\nimport {IFilterValue} from './search/tt-search.factory';\nimport {IOrder} from './sort/tt-sort.factory';\n\nexport interface ITableToolsExportType {\n    lang: string,\n    parseText?: (txt: string) => string,\n    callback?: (data: unknown[][], config: {\n        fileName: string,\n        columnNames: boolean,\n        separator: string\n    }) => IPromise<void>\n}\n\nexport interface ITableToolsLang {\n    next: string;\n    flipSelection: string;\n    last: string;\n    prev: string;\n    csv: string;\n    exportColumnNames: string;\n    exportSeparator: string;\n    exportChooseColumns: string;\n    filteredResults: string;\n    search: string;\n    perPage: string;\n    noResults: string;\n    from: string;\n    copiedToClipboard: string;\n    copy: string;\n    results: string;\n    export: string;\n    first: string;\n    tabulator: string\n}\n\nexport interface IPerPageOption {\n    number: number,\n    text: string\n}\n\nexport interface ITableToolsResponse {\n    data: Record<string, unknown>[],\n    count: number,\n    countFiltered: number\n}\n\nexport type TableToolsResolver = (\n    limit: number,\n    offset: number,\n    order: IOrder[],\n    search: string,\n    filters: { [field: string]: IFilterValue[] },\n    url: string\n) => IPromise<ITableToolsResponse>;\n\nexport class TableToolsProvider implements IServiceProvider {\n    public perPage = 25;\n    public perPageOptions: IPerPageOption[] = [\n        {number: 10, text: '10'},\n        {number: 25, text: '25'},\n        {number: 50, text: '50'},\n        {number: 100, text: '100'},\n        {number: 200, text: '200'},\n        {number: Infinity, text: 'Wszystkie'}\n    ];\n    public scrollOffset = 0;\n    public lang: ITableToolsLang = {\n        first: 'Pierwsza strona',\n        prev: 'Poprzednia strona',\n        next: 'Następna strona',\n        last: 'Ostatnia strona',\n        results: 'Wyniki:',\n        from: 'z',\n        perPage: 'Wyników na stronę:',\n        search: 'Szukaj...',\n        filteredResults: 'Filtrowanie z:',\n        export: 'Export',\n        exportChooseColumns: 'Wybierz kolumny',\n        flipSelection: 'odwróć zaznaczenie',\n        exportColumnNames: 'Eksportuj nazwy kolumn',\n        exportSeparator: 'Separator',\n        tabulator: 'Tabulator',\n        copy: 'Kopiuj',\n        csv: 'CSV',\n        copiedToClipboard: 'Skopiowano do schowka',\n        noResults: 'Nie znaleziono żadnych wyników!'\n    };\n    public exportTypes: { [name: string]: ITableToolsExportType } = {\n        copy: {\n            lang: this.lang.copy\n        },\n        csv: {\n            lang: this.lang.csv,\n            parseText(txt: string): string {\n                return '\"' + txt.replace('\"', '\"\"') + '\"';\n            }\n        }\n    };\n\n    public defaultTableToolsResolver?: TableToolsResolver;\n\n    $get(): this {\n        return this;\n    }\n\n    exportNotification(type: string): void {\n        if (type === 'copy') {\n            // eslint-disable-next-line no-alert\n            alert(this.lang.copiedToClipboard);\n        }\n    }\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport class TableToolsProvider {\n    constructor() {\n        this.perPage = 25;\n        this.perPageOptions = [\n            { number: 10, text: '10' },\n            { number: 25, text: '25' },\n            { number: 50, text: '50' },\n            { number: 100, text: '100' },\n            { number: 200, text: '200' },\n            { number: Infinity, text: 'Wszystkie' }\n        ];\n        this.scrollOffset = 0;\n        this.lang = {\n            first: 'Pierwsza strona',\n            prev: 'Poprzednia strona',\n            next: 'Następna strona',\n            last: 'Ostatnia strona',\n            results: 'Wyniki:',\n            from: 'z',\n            perPage: 'Wyników na stronę:',\n            search: 'Szukaj...',\n            filteredResults: 'Filtrowanie z:',\n            export: 'Export',\n            exportChooseColumns: 'Wybierz kolumny',\n            flipSelection: 'odwróć zaznaczenie',\n            exportColumnNames: 'Eksportuj nazwy kolumn',\n            exportSeparator: 'Separator',\n            tabulator: 'Tabulator',\n            copy: 'Kopiuj',\n            csv: 'CSV',\n            copiedToClipboard: 'Skopiowano do schowka',\n            noResults: 'Nie znaleziono żadnych wyników!'\n        };\n        this.exportTypes = {\n            copy: {\n                lang: this.lang.copy\n            },\n            csv: {\n                lang: this.lang.csv,\n                parseText(txt) {\n                    return '\"' + txt.replace('\"', '\"\"') + '\"';\n                }\n            }\n        };\n    }\n    $get() {\n        return this;\n    }\n    exportNotification(type) {\n        if (type === 'copy') {\n            // eslint-disable-next-line no-alert\n            alert(this.lang.copiedToClipboard);\n        }\n    }\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IComponentOptions} from 'angular';\n\nexport const ttFooterComponent: IComponentOptions = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    template: '<div class=\"row\">'\n        + '<tt-results-count class=\"col align-self-center\"></tt-results-count>'\n        + '<tt-pagination class=\"col col-auto\"></tt-pagination>'\n        + '</div>'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport const ttFooterComponent = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    template: '<div class=\"row\">'\n        + '<tt-results-count class=\"col align-self-center\"></tt-results-count>'\n        + '<tt-pagination class=\"col col-auto\"></tt-pagination>'\n        + '</div>'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport {IComponentOptions} from 'angular';\n\nexport const ttHeaderComponent: IComponentOptions = {\n    require: {\n        tableTools: '^tableTools',\n    },\n    template: '<div class=\"form-inline\">'\n        + '<tt-per-page></tt-per-page>'\n        + '<tt-loading></tt-loading>'\n        + '<tt-search class=\"ml-auto\"></tt-search>'\n        + '</div>'\n        + '<div class=\"row mt-3\">'\n        + '<tt-results-count class=\"col align-self-center\"></tt-results-count>'\n        + '<tt-pagination class=\"col col-auto pr-0\"></tt-pagination>'\n        + '<tt-export class=\"col col-auto pl-2\"></tt-export>'\n        + '</div>',\n};\n","export const ttHeaderComponent = {\n    require: {\n        tableTools: '^tableTools',\n    },\n    template: '<div class=\"form-inline\">'\n        + '<tt-per-page></tt-per-page>'\n        + '<tt-loading></tt-loading>'\n        + '<tt-search class=\"ml-auto\"></tt-search>'\n        + '</div>'\n        + '<div class=\"row mt-3\">'\n        + '<tt-results-count class=\"col align-self-center\"></tt-results-count>'\n        + '<tt-pagination class=\"col col-auto pr-0\"></tt-pagination>'\n        + '<tt-export class=\"col col-auto pl-2\"></tt-export>'\n        + '</div>',\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IComponentOptions} from 'angular';\n\nexport const ttLoadingComponent: IComponentOptions = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    bindings: {\n        extraCondition: '<?'\n    },\n    controllerAs: 'vm',\n    template: '<span ng-show=\"vm.tableTools.loading || vm.extraCondition\">'\n        + '&nbsp;<i class=\"fa fa-spinner fa-spin fa-lg\"></i></span>',\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport const ttLoadingComponent = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    bindings: {\n        extraCondition: '<?'\n    },\n    controllerAs: 'vm',\n    template: '<span ng-show=\"vm.tableTools.loading || vm.extraCondition\">'\n        + '&nbsp;<i class=\"fa fa-spinner fa-spin fa-lg\"></i></span>',\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\nimport {IComponentOptions} from 'angular';\n\nexport const ttResultsCountComponent: IComponentOptions = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    controllerAs: 'vm',\n    transclude: true,\n    templateUrl: 'src/templates/results-count.html'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport const ttResultsCountComponent = {\n    require: {\n        tableTools: '^tableTools'\n    },\n    controllerAs: 'vm',\n    transclude: true,\n    templateUrl: 'src/templates/results-count.html'\n};\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\n\n\nimport {IDirective} from 'angular';\n\nexport function ttRowPlaceholderDirective(): IDirective {\n    return {\n        restrict: 'A',\n        require: {\n            tableTools: '^tableTools'\n        },\n        controllerAs: 'vm',\n        bindToController: true,\n        scope: true,\n        template: '<td colspan=\"100%\" ng-if=\"!vm.tableTools.data.length\">'\n            + '<tt-loading></tt-loading>'\n            + '<span ng-if=\"!vm.tableTools.loading\">{{::vm.tableTools.lang.noResults}}</span>'\n            + '</td>'\n    }\n}\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nexport function ttRowPlaceholderDirective() {\n    return {\n        restrict: 'A',\n        require: {\n            tableTools: '^tableTools'\n        },\n        controllerAs: 'vm',\n        bindToController: true,\n        scope: true,\n        template: '<td colspan=\"100%\" ng-if=\"!vm.tableTools.data.length\">'\n            + '<tt-loading></tt-loading>'\n            + '<span ng-if=\"!vm.tableTools.loading\">{{::vm.tableTools.lang.noResults}}</span>'\n            + '</td>'\n    };\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_angular__;","module.exports = __WEBPACK_EXTERNAL_MODULE_angularjs_bootstrap_4__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport {tableTools} from './lib/table-tools.module';\nexport {TableToolsProvider} from './lib/table-tools.provider';\nexport {TtPagination} from './lib/pagination/tt-pagination.factory';\nexport {operator, IFilterValue, TtSearch} from './lib/search/tt-search.factory';\nexport {TtSelect} from './lib/select/tt-select.factory';\nexport {TtSort, IOrder} from './lib/sort/tt-sort.factory';\n\nexport {TableToolsController} from './lib/table-tools.directive';\n\nexport default tableTools;\n","/*\n * AngularJS TableTools Plugin\n *  Copyright (c) 2016-2021 Rodziu <mateusz.rohde@gmail.com>\n *  License: MIT\n */\nimport { tableTools } from './lib/table-tools.module';\nexport { TableToolsProvider } from './lib/table-tools.provider';\nexport { TtPagination } from './lib/pagination/tt-pagination.factory';\nexport { TtSearch } from './lib/search/tt-search.factory';\nexport { TtSelect } from './lib/select/tt-select.factory';\nexport { TtSort } from './lib/sort/tt-sort.factory';\nexport { TableToolsController } from './lib/table-tools.directive';\nexport default tableTools;\n"],"sourceRoot":""}